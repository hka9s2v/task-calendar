// 本番環境用Prismaスキーマ（NeonDB - PostgreSQL）
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   // ローカル認証用
  accounts      Account[]
  sessions      Session[]
  todos         Todo[]
  completionHistories CompletionHistory[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Todo {
  id          String   @id @default(cuid())
  title       String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   // ユーザーID追加
  
  // 繰り返し設定
  repeatType    String?  // "daily", "weekly", "monthly", "biweekly"
  dueDate       DateTime? // 期日
  weekDays      String?   // 週のタスクの場合の曜日 (例: "1,3,5" for 月水金)
  monthDay      Int?      // 月のタスクの場合の日 (1-31)
  biweeklyStart DateTime? // 隔週タスクの開始日
  
  // 完了履歴管理
  lastCompleted DateTime? // 最後に完了した日時
  isRecurring   Boolean   @default(false) // 繰り返しタスクかどうか
  
  // リレーション
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completions CompletionHistory[]
}

model CompletionHistory {
  id          String   @id @default(cuid())
  todoId      String
  userId      String   // ユーザーID追加
  completedAt DateTime @default(now())
  year        Int
  month       Int      // 1-12
  day         Int      // 1-31
  
  // リレーション
  todo        Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([todoId, year, month, day])
} 